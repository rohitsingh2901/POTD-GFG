Flatten BST to sorted list

You are given a Binary Search Tree (BST) with n nodes, each node has a distinct value assigned to it. The goal is to flatten the tree such that, the left child of each element points to nothing (NULL), and the right child points to the next element in the sorted list of elements of the BST (look at the examples for clarity). You must accomplish this without using any extra storage, except for recursive calls, which are allowed.

Note: If your BST does have a left child, then the system will print a -1 and will skip it, resulting in an incorrect solution.

Example 1:

Input:
          5
        /    \
       3      7
      /  \    /   \
     2   4  6     8
Output: 2 3 4 5 6 7 8
Explanation: 
After flattening, the tree looks
like this
    2
     \
      3
       \
        4
         \
          5
           \
            6
             \
              7
               \
                8
Here, left of each node points
to NULL and right contains the
next node.
Example 2:

Input:
       5
        \
         8
       /   \
      7     9  
Output: 5 7 8 9
Explanation:
After flattening, the tree looks like this:
   5
    \
     7
      \
       8
        \
         9
Your Task:
You don't need to read input or print anything. Your task is to complete the function flattenBST() which takes root node of the BST as input parameter and returns the root node after transforming the tree.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)

Constraints:
1 <= Number of nodes <= 103
1 <= Data of a node <= 105



Explanation:

1. Function Definition `inorder`:
   - This function performs an in-order traversal of the binary search tree (BST).
   - It takes two arguments: `root` - the current node being processed in the traversal, and `prev` - a reference to the previously visited node.

2. Base Case:
   - If the `root` is null (i.e., the current node is a leaf or empty), the function returns, as there's nothing to process.

3. Recursive In-order Traversal:
   - The function recursively traverses the left subtree of the current node (`root->left`) first.
   - During this traversal, it eventually reaches the leftmost node, which has no left child.
   - Then, it processes the current node (`root`) by performing the following steps:
     - Disconnects the left child of the current node (`root->left = NULL`), making it a leaf node.
     - Connects the current node to the right of the previous node (`prev->right = root`), effectively flattening the tree into a linked list.
     - Updates the `prev` pointer to the current node (`prev = root`), as it becomes the previously visited node for the next iteration.
   - Finally, it recursively traverses the right subtree of the current node (`root->right`).

4. Function Definition `flattenBST`:
   - This function is the entry point for flattening the BST.
   - It takes the root of the BST as an argument.

5. Initialization:
   - It initializes a dummy node (`dummy`) with a value of `-1`. This dummy node acts as the head of the flattened list.
   - It initializes a `prev` pointer to the dummy node. This pointer keeps track of the previously visited node during traversal.

6. In-order Traversal Call:
   - It calls the `inorder` function with the root of the BST and the `prev` pointer as arguments. This starts the in-order traversal of the BST.

7. Return Flattened List:
   - After the in-order traversal completes, the left child of the dummy node (`dummy->left`) remains null, and the right child of the dummy node (`dummy->right`) points to the head of the flattened list.
   - It returns the right child of the dummy node, which effectively returns the head of the flattened list.

This implementation efficiently flattens the BST into a sorted list in-place, without using any additional data structures, with an expected time complexity of O(N), where N is the number of nodes in the BST.