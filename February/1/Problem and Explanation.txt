Panagram Checking

Given a string s check if it is "Panagram" or not.

A "Panagram" is a sentence containing every letter in the English Alphabet.

Example 1:

Input:
s = "Bawds jog, flick quartz, vex nymph"
Output: 
1
Explanation: 
In the given input, there
are all the letters of the English
alphabet. Hence, the output is 1.
Example 2:

Input:
s = "sdfs"
Output: 
0
Explanation: 
In the given input, there
aren't all the letters present in the
English alphabet. Hence, the output
is 0.
Your Task:
You do not have to take any input or print anything. You need to complete the function checkPangram() that takes a string as a parameter and returns true if the string is a Panagram, or else it returns false.

Expected Time Complexity: O( |s| )
Expected Auxiliary Space: O(1)
|s| denotes the length of the input string.

Constraints:
1 ≤ |s| ≤ 104
Both Uppercase & Lowercase are considerable

Explanation:

1. It initializes an integer variable `chk` to 0. This variable will be used to keep track of which letters of the alphabet have been encountered.
2. It iterates over each character in the input string `s`.
3. For each lowercase character encountered, it sets the corresponding bit in `chk` to 1 using bitwise OR operation (`|`). It does this by shifting 1 to the left by `(s[i]-'a')` positions and then performing bitwise OR with `chk`.
4. Similarly, for uppercase characters, it does the same operation but with `(s[i]-'A')` to get the position of the letter in the alphabet.
5. After updating `chk`, it checks if all 26 bits are set to 1. It does this by checking if `chk+1` equals `1<<26`. If so, it means all bits from position 0 to 25 are set to 1, indicating that all letters of the alphabet have been encountered.
6. If the condition in step 5 is true, it returns `true`, indicating that the input string is a pangram.
7. If the loop completes without encountering all 26 letters, it returns `false`, indicating that the input string is not a pangram.