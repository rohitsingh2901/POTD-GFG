Largest Sum Subarray of Size at least K

Given an array a of length n and a number k, find the largest sum of the subarray containing at least k numbers. It is guaranteed that the size of array is at-least k.

Example 1:

Input : 
n = 4
a[] = {1, -2, 2, -3}
k = 2
Output : 
1
Explanation :
The sub-array of length at-least 2
that produces greatest sum is {1, -2, 2}




Explanation:
1. Initialization:
   - `sum`: Initialize as a `long long int` to accumulate the sum of elements.
   - Calculate the initial sum of the first 'k' elements and store it in `sum`.
   - `maxsum`: Initialize to the initial sum calculated.
   - `p`: Initialize to `maxsum`.

2. Sliding Window Technique:
   - Iterate through the array starting from index 'k' to 'n' using a sliding window approach.
   - Update `sum`:
       - Remove the leftmost element of the window (`a[i - k]`).
       - Add the rightmost element of the window (`a[i]`).
   - Update `p`:
       - Compare the sum of the current element with the previous 'p' plus the current element.
       - Assign the maximum value to `p`.
   - Update `maxsum`:
       - Keep track of the maximum sum found so far by comparing `maxsum` and `p`.

3. Return:
   - Finally, return `maxsum`, which holds the maximum sum of a subarray containing at least 'k' elements.

This method efficiently finds the maximum sum subarray by utilizing the sliding window technique and updating the necessary variables (`sum`, `p`, and `maxsum`) accordingly to achieve the desired result. Adjust the parameters and test cases to explore different scenarios.






Visualization:
The sliding window technique employed in the `maxSumWithK` method can be visualized using a diagram to illustrate how the window moves through the array while updating the sum and tracking the maximum sum found so far. Let's consider an example to demonstrate this:

Suppose we have an array `a[] = {1, -2, 2, -3, 4, 1}` with `k = 3` and `n = 6`.


Array:  [1, -2, 2, -3, 4, 1]
Indexes: 0   1   2   3   4   5


Let's visualize the sliding window for `k = 3` over this array and how the `maxSumWithK` method calculates the maximum sum subarray.

 Step-by-Step Visualization:

1. Initialization:
   - Start with the initial sum of the first 'k' elements: `sum = 1 + (-2) + 2 = 1`.
   - Set `maxsum` and `p` to the initial sum: `maxsum = p = 1`.


Initial Window: [1, -2, 2] (sum = 1)


2. Iterating through the Array:
   - Slide the window one step at a time.
   - Update the sum inside the window using the sliding window technique.


Window 1: [-2, 2, -3] (sum = -2 + 2 - 3 = -3)
Window 2: [2, -3, 4]  (sum = 2 - 3 + 4 = 3)
Window 3: [-3, 4, 1]  (sum = -3 + 4 + 1 = 2)


3. Updating 'p' and 'maxsum':
   - Calculate the maximum sum using 'p' and update 'maxsum' if necessary.


p values:    1    3    2    (maximum = 3)
maxsum:      1    3    3    (maximum = 3)


4. Final Result:
   - The maximum sum of a subarray containing at least 'k' elements is `3`.

