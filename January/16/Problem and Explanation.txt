Sequence of Sequence

Given two integers m and n, try making a special sequence of numbers seq of length n such that

seqi+1 >= 2*seqi 
seqi > 0
seqi <= m
Your task is to determine total number of such special sequences possible.

Example 1:

Input: 
m = 10
n = 4
Output: 
4
Explaination: 
There should be n elements and 
value of last element should be at-most m. 
The sequences are {1, 2, 4, 8}, {1, 2, 4, 9}, 
{1, 2, 4, 10}, {1, 2, 5, 10}.
Example 2:

Input: 
m = 5
n = 2
Output: 
6
Explaination: 
The sequences are {1, 2}, 
{1, 3}, {1, 4}, {1, 5}, {2, 4}, {2, 5}.
Your Task:
You do not need to read input or print anything. Your task is to complete the function numberSequence() which takes the number m and n as input parameters and returns the number of possible special sequences.

Expected Time Complexity: O(m*n)
Expected Auxiliary Space: O(1)

Constraints:
1 â‰¤ m, n â‰¤ 100


Explaination:

Example:

m = 5
n = 2


1. Call `numberSequence(5, 2)`:
    - `m` is not less than `n`, and `n` is not 0, so we proceed.
    - Calculate `numberSequence(4, 2) + numberSequence(2, 1)`:

2. Call `numberSequence(4, 2)`:
    - Calculate `numberSequence(3, 2) + numberSequence(2, 1)`:

3. Call `numberSequence(3, 2)`:
    - Calculate `numberSequence(2, 2) + numberSequence(1, 1)`:

4. Call `numberSequence(2, 2)`:
    - Calculate `numberSequence(1, 2) + numberSequence(1, 1)`:

5. Call `numberSequence(1, 2)`:
    - `m` is less than `n`, so return 0.

6. Call `numberSequence(1, 1)`:
    - Calculate `numberSequence(0, 0) + numberSequence(0, 0)`:

7. Call `numberSequence(0, 0)`:
    - Base case: `n` is 0, return 1.

8. Back to the previous calls:
    - `numberSequence(1, 1)` returns 2 (1 from each recursive call).
    - `numberSequence(2, 2)` returns 3 (2 from the first recursive call and 1 from the second).
    - `numberSequence(3, 2)` returns 5 (3 from the first recursive call and 2 from the second).

9. Back to the initial call:
    - `numberSequence(4, 2)` returns 8 (5 from the first recursive call and 3 from the second).

10. Back to the main call:
    - `numberSequence(5, 2)` returns 14 (8 from the first recursive call and 6 from the second).

So, for the input (5, 2), there are 14 possible special sequences, and your code correctly calculates this result.