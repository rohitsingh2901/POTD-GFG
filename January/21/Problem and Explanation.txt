Vertex Cover

Vertex cover of an undirected graph is a list of vertices such that every vertex not in the vertex cover shares their every edge with the vertices in the vertex cover. In other words, for every edge in the graph, atleast one of the endpoints of the graph should belong to the vertex cover. You will be given an undirected graph G, and your task is to determine the smallest possible size of a vertex cover.

Example 1:

Input:
N=5
M=6
edges[][]={{1,2}
           {4, 1},
           {2, 4},
           {3, 4},
           {5, 2},
           {1, 3}}
Output:
3
Explanation:
{2, 3, 4} forms a vertex cover
with the smallest size.
Example 2:

Input:
N=2
M=1
edges[][]={{1,2}} 
Output: 
1 
Explanation: 
Include either node 1 or node 2
in the vertex cover.
Your Task:  
You don't need to read input or print anything. Your task is to complete the function vertexCover() which takes the edge list and an integer n for the number of nodes of the graph as input parameters and returns the size of the smallest possible vertex cover.

Expected Time Complexity: O(M*2N)
Expected Auxiliary Space: O(N2)

 Constraints:
1 <= N <= 16
1 <= M <= N*(N-1)/2
1 <= edges[i][0], edges[i][1] <= N



Explanation:

1. "help" function:
    - Parameters:
        - "count": Current count of edges covered in the vertex cover.
        - "taken": Current count of vertices taken in the vertex cover.
        - "v": Current vertex being considered.
        - "n": Total number of vertices.
        - "m": Total number of edges.
        - "adj[]": Array of vectors representing the adjacency list of the graph.
        - "mm": Vector to keep track of whether a vertex is taken in the vertex cover.

    - The function is a recursive helper function that explores all possible combinations of vertices in the vertex cover.

    - Base Cases:
        - If the count of covered edges is equal to the total number of edges ("count == m"), return the current count of taken vertices.
        - If we have considered all vertices ("v == n + 1"), return "INT_MAX" as an indicator.

    - Recursive Calls:
        - "a = help(count, taken, v + 1, n, m, adj, mm)": Explore the case where the current vertex is not included in the vertex cover.
        - "b = help(count, taken + 1, v + 1, n, m, adj, mm)": Explore the case where the current vertex is included in the vertex cover.

    - Update the count based on the adjacent vertices of the current vertex:
        - Increment the count for each adjacent vertex that is not already in the vertex cover.

    - Update the "mm" vector to mark the current vertex as taken.

    - Return the minimum of the two recursive calls.

2. "vertexCover" function:
    - Parameters:
        - "n": Total number of vertices.
        - "edges": Vector of pairs representing the edges of the graph.

    - Create an adjacency list ("adj") from the given edges.

    - Initialize a vector "mm" to keep track of whether a vertex is taken.

    - Call the "help" function with initial values for count, taken, and the starting vertex.

    - Return the result.

