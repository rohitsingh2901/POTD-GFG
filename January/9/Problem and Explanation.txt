Search Pattern (KMP-Algorithm)

Given two strings, one is a text string, txt and other is a pattern string, pat. The task is to print the indexes of all the occurences of pattern string in the text string. Use one-based indexing while returing the indices. 
Note: Return an empty list incase of no occurences of pattern. Driver will print -1 in this case.

Example 1:

Input:
txt = "geeksforgeeks"
pat = "geek"
Output: 
1 9
Explanation: 
The string "geek" occurs twice in txt, one starts are index 1 and the other at index 9. 
Example 2:

Input: 
txt = "abesdu"
pat = "edu"
Output: 
-1
Explanation: 
There's not substring "edu" present in txt.
Your Task:
You don't need to read input or print anything. Your task is to complete the function search() which takes the string txt and the string pat as inputs and returns an array denoting the start indices (1-based) of substring pat in the string txt. 

Expected Time Complexity: O(|txt|).
Expected Auxiliary Space: O(|txt|).

Constraints:
1 ≤ |txt| ≤ 105
1 ≤ |pat| < |S|
Both the strings consists of lowercase English alphabets.



Explanation:

 "prefixFun" Function:
This function calculates the prefix function (also known as the failure function or the lps array) for a given string.

vector<int> prefixFun(string s){
    int n = s.length();
    vector<int> pi(n);
    for(int i = 1; i < n; i++){
        int j = pi[i - 1];
        while(j > 0 && s[i] != s[j]){
            j = pi[j - 1];
        }
        if(s[i] == s[j]){
            j++;
        }
        pi[i] = j;
    }
    return pi;
}

- It initializes an array "pi" to store the prefix function values for each index of the input string "s".
- The loop calculates the prefix function values for each index of the string "s".
- Inside the loop, it compares characters of the string at different positions to calculate the prefix function value for each index.

 "search" Function:
This function uses the KMP algorithm to search for occurrences of the pattern ("pat") within the text ("txt") and returns the starting indices of the pattern occurrences.


vector<int> search(string pat, string txt)
{
    string look = pat + '?' + txt;
    vector<int> kmp = prefixFun(look);
    vector<int> ans;
    int start = pat.size() - 1; // Set the start index
    for (int i = start; i < look.size(); i++)
    {
        if (kmp[i] == pat.size())
        {
            ans.push_back(i - 2 * pat.size() + 1); // Adjust index for original text
        }
    }
    return ans;
}

- It concatenates the pattern ("pat"), a question mark ("'?'"), and the text ("txt") to form a new string "look".
- Calls the "prefixFun" function to compute the prefix function values for the combined string "look".
- Initializes "start" as "pat.size() - 1", which represents the correct starting index to begin checking for occurrences of "pat" within "txt".
- Iterates through the prefix function array "kmp" to identify positions where the pattern matches completely ("kmp[i] == pat.size()").
- Records the starting indices of the pattern occurrences in the "ans" vector by adjusting the index for the original text.

Overall, your code effectively uses the KMP algorithm to find all occurrences of the pattern in the text and returns the starting indices as a vector of integers.