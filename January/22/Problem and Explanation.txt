Paths from root with a specified sum

Given a Binary tree and a sum S, print all the paths, starting from root, that sums upto the given sum. Path not necessarily end on a leaf node.

Example 1:

Input : 
sum = 8
Input tree
         1
       /   \
     20      3
           /    \
         4       15   
        /  \     /  \
       6    7   8    9      

Output :
1 3 4
Explanation : 
Sum of path 1, 3, 4 = 8.
Example 2:

Input : 
sum = 38
Input tree
          10
       /     \
     28       13
           /     \
         14       15
        /   \     /  \
       21   22   23   24
Output :
10 28
10 13 15  
Explanation :
Sum of path 10, 28 = 38 and
Sum of path 10, 13, 15 = 38.
Your task :
You don't have to read input or print anything. Your task is to complete the function printPaths() that takes the root of the tree and sum as input and returns a vector of vectors containing the paths that lead to the sum.
 
Expected Time Complexity: O(N)
Expected Space Complexity: O(N2)
 
Your Task :
1 <= N <= 2*103
-103 <= sum, Node.key <= 103


Explanation:

1. Class and Public Function:
   - I have defined a class named "Solution".
   - Inside the class, there is a public function "printPaths" that takes the root of a binary tree ("Node *root") and an integer "sum" as input. It returns a vector of vectors of integers ("vector<vector<int>>").

2. Depth-First Search (DFS) Function ("dfs"):
   - The "dfs" function is a helper function for the Depth-First Search.
   - Parameters:
     - "Node *root": Current node being processed.
     - "int sum": Target sum.
     - "int &currSum": Current sum for the path being explored. Passed by reference to maintain the state across recursive calls.
     - "vector<int> temp": Current path being explored. Passed by value to create a separate copy for each recursive call.
     - "vector<vector<int>> &ans": Result vector that stores valid paths. Passed by reference to update the result across recursive calls.

   - Inside "dfs":
     - If "root" is "NULL", it means we have reached the end of a path, and the function returns without further exploration.
     - "currSum" is updated by adding the value of the current node ("root->key") to it.
     - The current node's value is added to the "temp" vector, representing the current path.
     - If "currSum" equals the target "sum", the current path ("temp") is added to the result ("ans").
     - Recursively call "dfs" for the left and right subtrees.
     - After the recursive calls, the function backtracks by subtracting the current node's value from "currSum" and removing the last element from "temp".

My code follows the Depth-First Search approach with backtracking to find paths in a binary tree that sum up to the given target sum. The result is stored in the "ans" vector of vectors. The backtracking mechanism is achieved by modifying the state ("currSum" and "temp") as the algorithm explores and backtracks through the tree.