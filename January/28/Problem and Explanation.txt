Geekina Hate 1s

It is a universal fact that Geekina hates 1s however it is also known that Geekina loves the integers having atmost k 1s (set-bits) in their binary representation. 

Geekina demanded nth such non-negative number from Geek, and being a good friend of Geek, now it's your responsibility to tell him that number.

Note: The test cases are generated such that the answer always exists and will fit in the 64-bit data type.

Example 1:

Input:
n = 5
k = 1
Output:
8
Explanation:
Following numbers are loved by Geekina -
0 = (0)2
1 = (1)2
2 = (10)2
4 = (100)2
8 = (1000)2
Example 2:

Input:
n = 6
k = 2
Output:
5
Explanation:
Following numbers are loved by Geekina -
0 = (0)2
1 = (1)2
2 = (10)2
3 = (11)2
4 = (100)2
5 = (101)2
Your Task:
This is a function problem. The input is already taken care of by the driver code. You only need to complete the function findNthNumer() that takes n and k as input parameters. Return the nth number having at most k set-bits.

Expected Time Complexity: O(k*log(n) + constant)
Expected Auxiliary Space: O(k*log(n) + constant)

Constraints:
1 <= n <= 109
1 <= k <= 63


Explanation:
1. "findNthNumber()" function:
   - It performs a binary search between 0 and 1e18 to find the nth number.
   - Inside the binary search loop, it calls the "find()" function to count the numbers with at most k set bits.
   - If the count of such numbers is greater than or equal to n, it updates "hi" to "mid - 1", else updates "low" to "mid + 1".
   - Finally, it returns "low", which would be the nth number with at most k set bits.

2. "find()" function:
   - It converts the given number "n" to its binary representation and passes it to the "dpf()" function.

3. "dpf()" function:
   - It recursively calculates the count of numbers with at most k set bits using dynamic programming.
   - The "tight" parameter is used to indicate whether the current digit is at its upper bound or not.
   - It iterates through all possible digits (0 to ub) and recursively counts the numbers satisfying the conditions.
   - The count is stored in the "dp" array to avoid redundant calculations.
   - The base cases are handled for the end of the string ("n==0") and exceeding the set bit limit ("k<0").

4. "reset()" function:
   - It initializes the "dp" array with -1.

This code efficiently computes the nth number with at most k set bits using dynamic programming and binary search.
