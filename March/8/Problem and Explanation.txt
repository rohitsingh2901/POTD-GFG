Check if frequencies can be equal

Given a string s which contains only lower alphabetic characters, check if it is possible to remove at most one character from this string in such a way that frequency of each distinct character becomes same in the string. Return true if it is possible to do else return false.

Note: The driver code print 1 if the value returned is true, otherwise 0.

Example 1:

Input:
s = "xyyz"
Output: 
1 
Explanation: 
Removing one 'y' will make frequency of each character to be 1.
Example 2:

Input:
s = "xxxxyyzz"
Output: 
0
Explanation: 
Frequency can not be made same by removing at most one character.
Your Task:  
You dont need to read input or print anything. Complete the function sameFreq() which takes a string as input parameter and returns a boolean value denoting if same frequency is possible or not.

Expected Time Complexity: O(|s|) 
Expected Auxiliary Space: O(1)

Constraints:
1 <= |s| <= 105


Explanation:

- The function `sameFreq` takes a string `s` as input and returns a boolean indicating whether the frequencies can be made equal or not.
- It uses an unordered map `mm` to store the frequency of each character in the string.
- It iterates over the characters in the string `s` and updates the frequency count in the map `mm`.
- It then finds the minimum and maximum frequencies (`mn` and `mx`) among all characters.
- It also counts the number of characters with the minimum and maximum frequencies (`mnCount` and `mxCount`).
- If the minimum frequency is equal to the maximum frequency or if the minimum frequency is one less than the maximum frequency and there's only one character with the maximum frequency, it returns true.
- If there's only one character with the minimum frequency, and the minimum frequency is 1, and the sum of the counts of minimum and maximum frequency characters is equal to the total number of distinct characters, it returns true.
- Otherwise, it returns false.
