Fibonacci series up to Nth term

You are given an integer n, return the fibonacci series till the nth(0-based indexing) term. Since the terms can become very large return the terms modulo 109+7.

Example 1:

Input:
n = 5
Output:
0 1 1 2 3 5
Explanation:
0 1 1 2 3 5 is the Fibonacci series up to the 5th term.
Example 2:

Input:
n = 10
Output:
0 1 1 2 3 5 8 13 21 34 55
Explanation:
0 1 1 2 3 5 8 13 21 34 55 is the Fibonacci series up to the 10th term.
Your Task:
You don't need to read input or print anything. Your task is to complete the function Series() which takes an Integer n as input and returns a Fibonacci series up to the nth term.

Expected Time Complexity: O(n)
Expected Space Complexity: O(n)

Constraint:
1 <= n <= 10^5

Explanation:

1. Initialization: You initialize a vector 'fib' to store the Fibonacci series up to the nth term. You also set the modulo value to '1e9 + 7' for handling large Fibonacci numbers.

2. Base Cases: You handle the base cases separately. If 'n' is 0, you return a vector containing just 0. If 'n' is 1, you return a vector containing 0 and 1.

3. Generate Fibonacci Series: You iterate from index 2 to n in a loop. For each index 'i', you calculate the Fibonacci number at that index by summing up the previous two Fibonacci numbers ('fib[i-1]' and 'fib[i-2]'). Since Fibonacci numbers can grow large, you take the modulo operation with the given modulo value to prevent overflow.

4. Return the Series: After generating the Fibonacci series up to the nth term, you return the vector 'fib' containing the series.


Time Complexity:
- Initialization: The initialization step involves creating a vector of size n+1. This step takes O(n) time.
- Base Cases: The base cases are handled separately, and they take constant time, O(1).
- Generate Fibonacci Series: The loop iterates from index 2 to n, calculating each Fibonacci number by summing up the previous two Fibonacci numbers. Since each iteration of the loop performs constant-time operations, and the loop iterates n times, this step takes O(n) time.
- Return the Series: Returning the vector `fib` also takes O(n) time, as it involves copying the vector.

Space Complexity:
- The main space usage is for the vector `fib` of size n+1, which stores the Fibonacci series up to the nth term. Thus, the space complexity is O(n).
- Other space usage such as variables to store the modulo value and loop iterators are constant space, hence they don't contribute significantly to the overall space complexity.

The space complexity is O(n), and the time complexity is O(n), making the code efficient with respect to both time and space for the given problem constraints.