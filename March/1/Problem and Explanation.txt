Peak element

Given an 0-indexed array of integers arr[] of size n, find its peak element. An element is considered to be peak if it's value is greater than or equal to the values of its adjacent elements (if they exist).

Note: The output will be 1 if the index returned by your function is correct; otherwise, it will be 0.

Example 1:

Input: 
n = 3
arr[] = {1, 2, 3}
Peak element's index: 2
Output: 
1
Explanation: 
If the index returned is 2, then the output printed will be 1. Since arr[2] = 3 is greater than its adjacent elements, and there is no element after it, we can consider it as a peak element. No other index satisfies the same property.
Example 2:

Input:
n = 7
arr[] = {1, 1, 1, 2, 1, 1, 1}
Output: 
1
Explanation: 
In this case there are 5 peak elements with indices as {0,1,3,5,6}. Returning any of them will give you correct answer.
Your Task:
You don't have to read input or print anything. Complete the function peakElement() which takes the array arr[] and its size n as input parameters and return the index of the peak element.

Expected Time Complexity: O( log(n) ).
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ n ≤ 105
1 ≤ arr[i] ≤ 106


Explaination:
1. First initializes `start` and `end` pointers to the beginning and end of the array, respectively.
2. Then enters a while loop where it continues searching for the peak element until `start` is less than or equal to `end`.
3. Inside the loop, it calculates the middle index `mid` and checks if the element at `mid` is greater than or equal to its adjacent elements (`prev` and `next`). If it is, `mid` is returned as the index of the peak element.
4. If the element at `mid` is less than the element at `prev`, it means the peak element lies in the left half of the array, so the `end` pointer is updated to `mid - 1`.
5. If the element at `mid` is less than the element at `next`, it means the peak element lies in the right half of the array, so the `start` pointer is updated to `mid + 1`.
6. If no peak element is found in the array, `-1` is returned.
